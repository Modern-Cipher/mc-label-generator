// --- GLOBAL VARIABLES ---
let printModal, downloadModal;
let pageData = null;

// --- INITIALIZATION ---
document.addEventListener('DOMContentLoaded', () => {
    const printModalEl = document.getElementById('printModal');
    printModal = new bootstrap.Modal(printModalEl);
    downloadModal = new bootstrap.Modal(document.getElementById('downloadModal'));

    printModalEl.addEventListener('hidden.bs.modal', () => {
        document.getElementById('printButton').focus();
    });

    document.getElementById('category').addEventListener('change', (e) => {
        const presets = { 'Whole 1000g': '1000', 'Crushed 250g': '250', 'Crushed 500g': '500', 'Crushed 1000g': '1000' };
        const weight = presets[e.target.value] || '';
        document.getElementById('weightNum').value = weight;
        document.getElementById('weightType').value = weight ? 'gm' : '';
    });

    // --- NEW: LOGO CHANGER ---
    // This listener updates the main logo at the top of the page.
    document.getElementById('logoName').addEventListener('change', (e) => {
        const mainLogo = document.getElementById('mainLogo');
        if (mainLogo) {
            mainLogo.src = e.target.value;
        }
    });
});

// --- CORE LOGIC ---
const dimensions = {
    A4: { width: 8.27, height: 11.69 }, Letter: { width: 8.5, height: 11 }, '8.5x13': { width: 8.5, height: 13 },
};

function calculateMaxLabels(paperSize, orientation) {
    let r, c;
    if (orientation === 'landscape') {
        if (paperSize === '8.5x13') { r = 6; c = 4; } else { r = 5; c = 4; }
    } else {
        if (paperSize === '8.5x13') { r = 4; c = 6; } else { r = 4; c = 5; }
    }
    return { maxLabels: r * c, labelsPerRow: r, labelsPerColumn: c };
}

function generateLabelData() {
    const form = document.getElementById('labelForm');
    if (!form.checkValidity()) { form.reportValidity(); return null; }
    const data = {
        logoSrc: form.logoName.value,
        paperSize: form.paperSize.value,
        orientation: form.orientation.value,
        // This will be the main text, like "Crushed 1000g" or "Whole 500gm"
        primaryText: form.category.value.includes('g') ? form.category.value : `${form.category.value.replace(' (Custom)', '')} ${form.weightNum.value}${form.weightType.value}`,
    };

    if (!form.pdInput.value) { Swal.fire('Missing Date', 'Please select a Production Date.', 'error'); return null; }
    const prodDate = new Date(form.pdInput.value);
    const bestDate = new Date(prodDate);
    bestDate.setDate(prodDate.getDate() + 30);
    const dateOptions = { year: 'numeric', month: 'long', day: '2-digit' };
    data.formattedPD = prodDate.toLocaleDateString('en-US', dateOptions);
    data.formattedBB = bestDate.toLocaleDateString('en-US', dateOptions);
    Object.assign(data, calculateMaxLabels(data.paperSize, data.orientation));
    return data;
}

// --- ACTION: PRINT ---
function printLabels() {
    pageData = generateLabelData();
    if (!pageData) return;
    printModal.show();
}

function triggerPrint() {
    printModal.hide();
    const { paperSize, orientation, maxLabels, labelsPerRow, primaryText, formattedPD, formattedBB, logoSrc } = pageData;

    // The label structure for print - Simplified to only show logo, primary text, and dates
    const labelHtml = `
        <div class="label-card">
            <div style="flex-shrink: 0; display: flex; justify-content: center; align-items: center; width: 100%;">
                <img src="${logoSrc}" class="logo" onerror="this.outerHTML='<div class=\\'logo-fallback\\'>No Image</div>'">
            </div>
            <p class="main-content">${primaryText}</p>
            <div class="dates" style="flex-shrink: 0;">
                <p><strong>PD:</strong> ${formattedPD}</p>
                <p><strong>BB:</strong> ${formattedBB}</p>
            </div>
        </div>
    `;

    const printWindow = window.open('', '_blank');
    printWindow.document.write(`
        <html>
            <head>
                <title>Print Labels</title>
                <link rel="preconnect" href="https://fonts.googleapis.com" /><link rel="preconnect" href="https://fonts.gstatic.com" crossorigin /><link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;700&display=swap" rel="stylesheet" />
                <style>
                    /* Universal reset: Ensure all elements include borders in dimensions, and no default margins/paddings */
                    * {
                        box-sizing: border-box;
                        margin: 0;
                        padding: 0;
                    }
                    body {
                        font-family: 'Poppins', sans-serif;
                        margin: 0; /* No body margin */
                    }
                    @page {
                        /* Set page size and orientation */
                        size: ${paperSize === '8.5x13' ? '8.5in 13in' : paperSize} ${orientation};
                        margin: 0.1in; /* Minimal page margin */
                    }
                    .print-container {
                        display: grid;
                        gap: 0; /* No gap between labels in the grid */
                        grid-template-columns: repeat(${labelsPerRow}, 2in);
                        justify-content: start; /* Align to the left edge of the printable area */
                        width: ${labelsPerRow * 2}in; /* Explicitly set container width */
                        height: auto; /* Let content define height */
                    }
                    .label-card {
                        font-family: 'Poppins', sans-serif;
                        border: 0.75pt dashed lightgray; /* Border for separation */
                        text-align: center;
                        overflow: hidden; /* Clip overflow */
                        display: flex;
                        flex-direction: column;
                        justify-content: space-between; /* Distribute vertical space */
                        align-items: stretch; /* Stretch content to full width */
                        width: 2in;
                        height: 2in;
                        min-width: 2in;
                        min-height: 2in;
                        max-width: 2in;
                        max-height: 2in;
                        box-sizing: border-box;
                        padding: 0.04in; /* Padding for readability */
                        margin: 0;
                        page-break-inside: avoid; /* Prevent labels from splitting across pages */
                    }

                    .label-card img.logo {
                        width: 90%; /* Increased logo size */
                        max-width: 90%;
                        height: auto;
                        margin: 0 auto 0; /* Center, removed bottom margin */
                        padding: 0;
                        display: block;
                    }

                    .logo-fallback {
                        border: 1px solid #ccc;
                        border-radius: 0;
                        width: 90%; /* Match logo width */
                        max-width: 90%;
                        height: 0.3in; /* Adjusted height for fallback */
                        display: flex;
                        align-items: center;
                        justify-content: center;
                        font-size: 0.12in; /* Larger fallback font */
                        font-weight: bold;
                        color: #888;
                        margin: 0 auto 0;
                        padding: 0;
                        box-sizing: border-box;
                        line-height: 1;
                    }

                    /* Main Product Text (e.g., "Crushed 1000g") */
                    .label-card .main-content {
                        margin: 0; /* No vertical margin */
                        padding: 0 0.02in; /* Minimal horizontal padding */
                        font-size: 0.17in; /* Kept this size, should fit now */
                        font-weight: 700;
                        white-space: nowrap; /* Keep on one line */
                        overflow: hidden; /* Clip overflow */
                        text-overflow: ellipsis; /* Ellipsis for overflow */
                        line-height: 1.1; /* Consistent line height for readability */
                        width: 100%; /* Full width within padding */
                        box-sizing: border-box;
                        display: flex; /* Use flex for vertical centering */
                        align-items: center; /* Vertically center */
                        justify-content: center; /* Horizontally center */
                        flex-grow: 0; /* **CRITICAL: DO NOT GROW, ONLY TAKE CONTENT HEIGHT** */
                        flex-shrink: 0; /* Do not allow it to shrink */
                    }

                    .dates {
                        width: 100%; /* Full width */
                        margin-top: 0.00in; /* Removed margin-top for minimal spacing */
                        padding: 0 0.02in; /* Minimal horizontal padding */
                        box-sizing: border-box;
                        display: flex;
                        flex-direction: column;
                        justify-content: flex-end; /* Push dates to bottom */
                        flex-grow: 1; /* Allow dates section to fill remaining vertical space */
                    }

                    .dates p {
                        font-size: 0.18in; /* Kept this size as it seems to fit well */
                        font-weight: normal;
                        text-align: left; /* Dates are left-aligned */
                        border-bottom: 0.5pt solid #555;
                        padding: 0 0 0.01in 0; /* Minimal bottom padding for border */
                        margin: 0; /* No margins between date lines */
                        line-height: 1.1; /* Consistent line height for readability */
                        white-space: nowrap;
                        overflow: hidden;
                        text-overflow: ellipsis; /* Ellipsis for overflow */
                        display: block;
                    }

                    .dates p:last-child {
                        border-bottom: none; /* No border on last date */
                    }
                </style>
            </head>
            <body>
                <div class="print-container">${Array(maxLabels).fill(labelHtml).join('')}</div>
                <script>
                    window.onload = function() {
                        window.print();
                    }
                <\/script>
            </body>
        </html>
    `);
    printWindow.document.close();
}

// --- ACTION: EXPORT PDF ---
function exportPdfLabels() {
    const data = generateLabelData();
    if (!data) return;
    const pageWrapper = document.createElement('div');
    pageWrapper.id = 'pdf-page-wrapper'; pageWrapper.className = 'pdf-page-wrapper';
    let { width, height } = dimensions[data.paperSize];
    if (data.orientation === 'landscape') [width, height] = [height, width];
    pageWrapper.style.width = `${width}in`; pageWrapper.style.height = `${height}in`;

    // Re-use the same HTML structure with inlined styles for consistency with print
    const labelHtml = `
        <div class="label-card" style="
            font-family: 'Poppins', sans-serif;
            border: 0.75pt dashed lightgray;
            text-align: center;
            overflow: hidden;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            align-items: stretch;
            width: 2in;
            height: 2in;
            min-width: 2in;
            min-height: 2in;
            max-width: 2in;
            max-height: 2in;
            box-sizing: border-box;
            padding: 0.04in; /* Padding for readability */
            margin: 0;
            background-color: #ffffff; /* Ensure white background for image download */
        ">
            <div style="flex-shrink: 0; display: flex; justify-content: center; align-items: center; width: 100%;">
                <img src="${data.logoSrc}" class="logo" style="width: 90%; max-width: 90%; height: auto; margin: 0 auto 0; padding: 0; display: block;" onerror="this.outerHTML='<div class=\\'logo-fallback\\' style=\\'border: 1px solid #ccc; border-radius: 0; width: 90%; max-width: 90%; height: 0.3in; display: flex; align-items: center; justify-content: center; font-size: 0.12in; font-weight: bold; color: #888; margin: 0 auto 0; padding: 0; box-sizing: border-box; line-height: 1;\\'>No Image</div>'">
            </div>
            <p class="main-content" style="
                margin: 0; padding: 0 0.02in;
                font-size: 0.17in; /* Kept this size, should fit now */
                font-weight: 700;
                white-space: nowrap; overflow: hidden; text-overflow: ellipsis;
                line-height: 1.1; width: 100%; box-sizing: border-box;
                display: flex; align-items: center; justify-content: center;
                flex-grow: 0; /* **CRITICAL: DO NOT GROW, ONLY TAKE CONTENT HEIGHT** */
                flex-shrink: 0; /* Do not allow it to shrink */
            ">${data.primaryText}</p>
            <div class="dates" style="width: 100%; margin-top: 0.00in; padding: 0 0.02in; box-sizing: border-box; display: flex; flex-direction: column; justify-content: flex-end; flex-grow: 1;">
                <p style="
                    font-size: 0.18in; font-weight: normal;
                    text-align: left; border-bottom: 0.5pt solid #555;
                    padding: 0 0 0.01in 0; margin: 0;
                    line-height: 1.1; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;
                    display: block;
                "><strong>PD:</strong> ${data.formattedPD}</p>
                <p style="
                    font-size: 0.18in; font-weight: normal;
                    text-align: left; /* No border-bottom for the last date */
                    padding: 0; margin: 0;
                    line-height: 1.1; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;
                    display: block;
                "><strong>BB:</strong> ${data.formattedBB}</p>
            </div>
        </div>
    `;

    const labelContainer = document.createElement('div');
    labelContainer.className = 'label-container';
    // Apply grid styles directly for consistency
    labelContainer.style.display = 'grid';
    labelContainer.style.gap = '0';
    labelContainer.style.gridTemplateColumns = `repeat(${data.labelsPerRow}, 2in)`;
    labelContainer.style.justifyContent = 'start'; // Align to start (left)


    labelContainer.innerHTML = Array(data.maxLabels).fill(labelHtml).join('');
    pageWrapper.appendChild(labelContainer);
    document.body.appendChild(pageWrapper);

    const pdfFormat = data.paperSize === '8.5x13' ? [8.5, 13] : data.paperSize.toLowerCase();
    const opt = {
        margin: 0.1, // Match the print margin for PDF
        filename: 'labels.pdf',
        image: { type: 'jpeg', quality: 1 },
        html2canvas: { scale: 2, dpi: 300, useCORS: true },
        jsPDF: { unit: 'in', format: pdfFormat, orientation: data.orientation }
    };
    html2pdf().set(opt).from(pageWrapper).save().then(() => {
        document.getElementById('pdf-page-wrapper')?.remove();
        Swal.fire('Exported!', 'Labels have been exported as PDF.', 'success');
    });
}

// --- ACTION: DOWNLOAD IMAGE ---
function downloadLabel() {
    const data = generateLabelData();
    if (!data) return;

    // Use the same inline styles for the single label download for consistency
    const singleLabelHtml = `
        <div class="label-card" style="
            font-family: 'Poppins', sans-serif;
            border: 0.75pt dashed lightgray;
            text-align: center;
            overflow: hidden;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            align-items: stretch;
            width: 2in;
            height: 2in;
            min-width: 2in;
            min-height: 2in;
            max-width: 2in;
            max-height: 2in;
            box-sizing: border-box;
            padding: 0.04in; /* MINIMAL PADDING FOR READABILITY */
            margin: 0;
            background-color: #ffffff; /* Ensure white background for image download */
        ">
            <div style="flex-shrink: 0; display: flex; justify-content: center; align-items: center; width: 100%;">
                <img src="${data.logoSrc}" class="logo" style="width: 90%; max-width: 90%; height: auto; margin: 0 auto 0; padding: 0; display: block;" onerror="this.outerHTML='<div class=\\'logo-fallback\\' style=\\'border: 1px solid #ccc; border-radius: 0; width: 90%; max-width: 90%; height: 0.3in; display: flex; align-items: center; justify-content: center; font-size: 0.12in; font-weight: bold; color: #888; margin: 0 auto 0; padding: 0; box-sizing: border-box; line-height: 1;\\'>No Image</div>'">
            </div>
            <p class="main-content" style="
                margin: 0; padding: 0 0.02in;
                font-size: 0.17in; /* ADJUST THIS FONT SIZE! Smaller for full fit of "1000g" */
                font-weight: 700;
                white-space: nowrap; overflow: hidden; text-overflow: ellipsis;
                line-height: 1.1; width: 100%; box-sizing: border-box;
                display: flex; align-items: center; justify-content: center;
                flex-grow: 0; /* **CRITICAL: DO NOT GROW, ONLY TAKE CONTENT HEIGHT** */
                flex-shrink: 0; /* Do not allow it to shrink */
            ">${data.primaryText}</p>
            <div class="dates" style="width: 100%; margin-top: 0.00in; padding: 0 0.02in; box-sizing: border-box; display: flex; flex-direction: column; justify-content: flex-end; flex-grow: 1;">
                <p style="
                    font-size: 0.18in; font-weight: normal;
                    text-align: left; border-bottom: 0.5pt solid #555;
                    padding: 0 0 0.01in 0; margin: 0;
                    line-height: 1.1; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;
                    display: block;
                "><strong>PD:</strong> ${data.formattedPD}</p>
                <p style="
                    font-size: 0.18in; font-weight: normal;
                    text-align: left; /* No border-bottom for the last date */
                    padding: 0; margin: 0;
                    line-height: 1.1; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;
                    display: block;
                "><strong>BB:</strong> ${data.formattedBB}</p>
            </div>
        </div>
    `;

    const tempContainer = document.createElement('div');
    tempContainer.style.position = 'fixed';
    tempContainer.style.left = '-9999px';
    tempContainer.innerHTML = singleLabelHtml;
    document.body.appendChild(tempContainer);
    const labelToRender = tempContainer.firstChild;
    const imageToLoad = labelToRender.querySelector('img');

    const renderCanvas = () => {
        html2canvas(labelToRender, { scale: 4, dpi: 300, useCORS: true, backgroundColor: '#ffffff' }).then(canvas => {
            document.body.removeChild(tempContainer);
            const dataUrl = canvas.toDataURL('image/jpeg', 1.0);
            const isMobile = /Android|webOS|iPhone|iPad|iPod/i.test(navigator.userAgent);
            if (isMobile) {
                document.getElementById('download-image-preview').src = dataUrl;
                downloadModal.show();
            } else {
                const link = document.createElement('a'); link.download = 'label.jpg'; link.href = dataUrl; link.click();
                Swal.fire('Downloaded!', 'Label has been downloaded as JPEG.', 'success');
            }
        });
    };

    // Check if an image exists to be loaded. If not (fallback was used), render directly.
    if (imageToLoad && !imageToLoad.complete) {
        imageToLoad.onload = renderCanvas;
        imageToLoad.onerror = renderCanvas; // Also render if the image fails to load
    } else {
        renderCanvas(); // Render immediately if there's no image or it's already cached
    }
}