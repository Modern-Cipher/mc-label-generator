// service-worker.js

const CACHE_NAME = 'product-label-generator-cache-v1.0.0'; // Update version for new deployments
const urlsToCache = [
  '/',
  'index.html',
  'manifest.json',
  'assets/css/styles.css',
  'assets/js/script.js',
  'assets/js/mobile-handler.js',
  'assets/js/version.js',
  'assets/js/social-links.js',
  'assets/js/pwa-handler.js', // Include the new PWA handler script
  'assets/images/mdc.ico',
  'assets/images/rakjard.png',
  'assets/images/ronshe-dragons.png',
  'assets/images/dragon-angels.png',
  'assets/images/chicha-crush.png',
  'assets/images/mc.png', // The original footer logo
  // Include all PWA icons in the cache
  'assets/images/pwa_icons/mc-72x72.png',
  'assets/images/pwa_icons/mc-96x96.png',
  'assets/images/pwa_icons/mc-128x128.png',
  'assets/images/pwa_icons/mc-144x144.png',
  'assets/images/pwa_icons/mc-152x152.png',
  'assets/images/pwa_icons/mc-180x180.png',
  'assets/images/pwa_icons/mc-192x192.png',
  'assets/images/pwa_icons/mc-384x384.png',
  'assets/images/pwa_icons/mc-512x512.png',
  // External assets that are crucial for basic functionality
  'https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css',
  'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css',
  'https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css',
  'https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js',
  'https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.1/html2pdf.bundle.min.js',
  'https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js',
  'https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.js',
  'https://fonts.googleapis.com/css2?family=Poppins:wght@400;700&display=swap',
  'https://fonts.gstatic.com/s/poppins/v20/pxiByp8kv8JHgFVrLCzLExudELw.woff2', // Example font file, check network tab for actual URL
  'https://fonts.gstatic.com/s/poppins/v20/pxiGyp8kv8JHgFVrWCzLElZTvIM.woff2'  // Example font file
];

// Install event: caches all required assets
self.addEventListener('install', (event) => {
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then((cache) => {
        console.log('Opened cache');
        return cache.addAll(urlsToCache);
      })
      .then(() => self.skipWaiting()) // Activates the new service worker immediately
      .catch((error) => console.error('Failed to cache during install:', error))
  );
});

// Activate event: cleans up old caches
self.addEventListener('activate', (event) => {
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cacheName) => {
          if (cacheName !== CACHE_NAME) {
            console.log('Deleting old cache:', cacheName);
            return caches.delete(cacheName);
          }
        })
      );
    }).then(() => self.clients.claim()) // Makes the current service worker control all clients immediately
  );
});

// Fetch event: serves content from cache or network
self.addEventListener('fetch', (event) => {
  // Check if the request is for a font or a local asset
  if (event.request.url.startsWith('https://fonts.gstatic.com/') || urlsToCache.some(url => event.request.url.includes(url))) {
    event.respondWith(
      caches.match(event.request)
        .then((response) => {
          if (response) {
            return response; // Serve from cache
          }
          return fetch(event.request).then((networkResponse) => {
            // Cache new requests if they are successful
            if (networkResponse.ok) {
              return caches.open(CACHE_NAME).then((cache) => {
                cache.put(event.request, networkResponse.clone());
                return networkResponse;
              });
            }
            return networkResponse;
          });
        })
        .catch((error) => console.error('Fetch failed:', error))
    );
  } else {
    // For other requests, just perform a normal network fetch
    event.respondWith(fetch(event.request));
  }
});